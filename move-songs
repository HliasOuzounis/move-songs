#!/usr/bin/python
# -*- coding: utf-8 -*-

import os
import shutil
import argparse

from mutagen.flac import FLAC
from mutagen.mp3 import MP3
from mutagen.m4a import M4A


def get_metadata(file, metadata_type, file_type):
    if file_type == ".flac":
        parsed_file = FLAC(file)
    elif file_type == ".mp3":
        parsed_file = MP3(file)
    elif file_type == ".m4a":
        parsed_file = M4A(file)
    else:
        raise AssertionError(f"Unrecognized Extension for metadata {file_type}. Something went horribly wrong!")
    
    metadata = parsed_file[metadata_type]
    if not metadata[0].strip():
        print(f"No {metadata_type} metadata for {file.split('/')[-1]}")
        metadata = [input("Enter metadata yourself:\n")]
        parsed_file[metadata_type] = metadata[0]
        parsed_file.save()
   
    if len(metadata) > 1:
        parsed_file[metadata_type] = metadata[0]
        parsed_file.save()
    
    return metadata[0].split(" (")[0]


class Sorter:
    def __init__(self, metadata_type, next_sorter=None):
        self.type = metadata_type
        self.next_sorter = next_sorter

    def sort_file(self, starting_path, file, target_dir):
        metadata = get_metadata(os.path.join(starting_path, file), self.type, os.path.splitext(file)[1])
        if not os.path.isdir(os.path.join(target_dir, metadata)):
            os.mkdir(os.path.join(target_dir, metadata))
        if self.next_sorter:
            self.next_sorter.sort_file(
                starting_path, file, os.path.join(target_dir, metadata)
            )
        else:
            song_name = get_metadata(os.path.join(starting_path, file), "TITLE", os.path.splitext(file)[1])
            print(song_name)
            shutil.move(
                os.path.join(starting_path, file),
                os.path.join(target_dir, metadata, file),
            )


def parse_args():

    parser = argparse.ArgumentParser(description="Sort music files by metadata")
    parser.add_argument(
        "starting_dir",
        metavar="start-dir",
        type=str,
        help="Directory of the unsorted music files",
    )
    parser.add_argument("-y", "--year", action="store_true", help="sort by year")
    parser.add_argument("-a", "--album", action="store_true", help="sort by album")
    parser.add_argument(
        "-s", "--song", action="store_true", help="add each song to its own folder"
    )
    parser.add_argument(
        "-t", "--target-dir", help="Directory where the files will be sorted"
    )

    args = parser.parse_args()

    starting_dir = args.starting_dir

    target_dir = args.target_dir
    if not target_dir:
        target_dir = starting_dir

    year = args.year
    album = args.album
    song = args.song

    return starting_dir, target_dir, year, album, song


def main():
    starting_dir, target_dir, year, album, song = parse_args()

    first_sorter = Sorter("ARTIST")
    current_sorter = first_sorter

    if year:
        current_sorter.next_sorter = Sorter("YEAR")
        current_sorter = current_sorter.next_sorter
    if album:
        current_sorter.next_sorter = Sorter("ALBUM")
        current_sorter = current_sorter.next_sorter
    if song:
        current_sorter.next_sorter = Sorter("SONG")

    for (root, dirs, files) in os.walk(starting_dir):
        for file in files:
            if not (
                file.endswith(".flac") or file.endswith(".mp3") or file.endswith(".m4a")
            ):
                continue
            first_sorter.sort_file(root, file, target_dir)


if __name__ == "__main__":
    main()
